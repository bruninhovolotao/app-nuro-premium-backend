// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  email     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  username  String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authToken String?
  tipo      Tipo     @default(USER)

  @@map("user")
}

model Client {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  FinancialTransaction FinancialTransaction[]

  @@map("client")
}

model Service {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  price                Decimal                @default(0.00) @db.Decimal(10, 2)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  FinancialTransaction FinancialTransaction[]
  ServiceOnTransaction ServiceOnTransaction[]

  @@map("service")
}

model Product {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  price                Decimal                @default(0.00) @db.Decimal(10, 2)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  FinancialTransaction FinancialTransaction[]
  ProductOnTransaction ProductOnTransaction[]
  ProductSale          ProductSale[]

  @@map("product")
}

model Professional {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  serviceCommission    Decimal                @default(0.00) @db.Decimal(5, 2) // 0.00 a 100.00 (%)
  productCommission    Decimal                @default(0.00) @db.Decimal(5, 2) // 0.00 a 100.00 (%)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  FinancialTransaction FinancialTransaction[]
  ProductSale          ProductSale[]

  @@map("professional")
}

model ProductSale {
  id             Int      @id @default(autoincrement())
  date           DateTime @default(now())
  quantity       Int      @default(1)
  unitPrice      Decimal  @default(0.00) @db.Decimal(10, 2)
  totalPrice     Decimal  @default(0.00) @db.Decimal(10, 2)
  commissionRate Decimal  @default(0.00) @db.Decimal(5, 2)

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_sale")
}

model FinancialTransaction {
  id            Int      @id @default(autoincrement())
  date          DateTime @default(now())
  serviceDate   DateTime
  totalAmount   Decimal  @default(0.00) @db.Decimal(10, 2)
  paymentMethod String   @db.VarChar(50)
  notes         String?  @db.VarChar(255)

  clientId Int
  client   Client @relation(fields: [clientId], references: [id])

  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])

  services ServiceOnTransaction[]
  products ProductOnTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  @@map("financial_transaction")
}

model ServiceOnTransaction {
  id                     Int @id @default(autoincrement())
  financialTransactionId Int
  serviceId              Int
  quantity               Int @default(1)

  financialTransaction FinancialTransaction @relation(fields: [financialTransactionId], references: [id])
  service              Service              @relation(fields: [serviceId], references: [id])

  @@map("service_on_transaction")
}

model ProductOnTransaction {
  id                     Int @id @default(autoincrement())
  financialTransactionId Int
  productId              Int
  quantity               Int @default(1)

  financialTransaction FinancialTransaction @relation(fields: [financialTransactionId], references: [id])
  product              Product              @relation(fields: [productId], references: [id])

  @@map("product_on_transaction")
}

enum Tipo {
  USER
  ADMIN
}
