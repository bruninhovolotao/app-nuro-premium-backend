// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  email     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  username  String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authToken String?
  tipo      Tipo     @default(USER)

  @@map("user")
}

model Client {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  FinancialTransaction FinancialTransaction[]

  @@map("client")
}

model Professional {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(50)
  serviceCommission    Decimal                @default(0.00) @db.Decimal(5, 2) // 0.00 a 100.00 (%)
  productCommission    Decimal                @default(0.00) @db.Decimal(5, 2) // 0.00 a 100.00 (%)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  FinancialTransaction FinancialTransaction[]

  @@map("professional")
}

model FinancialTransaction {
  id            Int      @id @default(autoincrement())
  date          DateTime @default(now())
  totalAmount   Decimal  @default(0.00) @db.Decimal(10, 2)
  paymentMethod String   @db.VarChar(50)
  notes         String?  @db.VarChar(255)

  clientId Int
  client   Client @relation(fields: [clientId], references: [id])

  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])

  serviceItems ServiceItem[] // Serviços utilizados nessa transação
  productItems ProductItem[] // Produtos utilizados nessa transação

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("financial_transaction")
}

model ServiceItem {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(50)
  price    Decimal @db.Decimal(10, 2)
  quantity Int     @default(1)

  transactionId Int
  transaction   FinancialTransaction @relation(fields: [transactionId], references: [id])

  @@map("service_item")
}

model ProductItem {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(50)
  price    Decimal @db.Decimal(10, 2)
  quantity Int     @default(1)

  transactionId Int
  transaction   FinancialTransaction @relation(fields: [transactionId], references: [id])

  @@map("product_item")
}

enum Tipo {
  USER
  ADMIN
}
